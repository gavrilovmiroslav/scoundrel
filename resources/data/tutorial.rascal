
unique terrain: field of symbol;
event MoveIntent { e: entity, p: num, q: num };

proc MakeRooms(space: in geometry,
    min_width: num, max_width: num,
    min_height: num, max_height: num,
    count: num) {

    for i in 0 to count {
        let w = rand(min_width, max_width);
        let h = rand(min_height, max_height);
        let x = rand(1, 64 - w);
        let y = rand(1, 48 - h);

        let outer = rectangle(x, y; x + w, y + h);
        let inner = shrink(outer, 1);

        if empty(intersect(space, inner)) {
            space = union(space, outer);
            terrain[inner] = '.';
        }
    }
}

[Spawn Player On Start]
on Start
{
    spawn player with IsPlayer & IsAt(5, 4) & HasGlyph('@') & HasColor(0, 0, 255);

    let used_room_space = make_set();

    MakeRooms(space: used_room_space,
        min_width: 10, max_width: 15,
        min_height: 8, max_height: 12,
        count: 200);

    MakeRooms(space: used_room_space,
        min_width: 5, max_width: 8,
        min_height: 5, max_height: 7,
        count: 100);

    MakeRooms(space: used_room_space,
        min_width: 4, max_width: 6,
        min_height: 4, max_height: 5,
        count: 50);

    MakeRooms(space: used_room_space,
        min_width: 2, max_width: 4,
        min_height: 2, max_height: 3,
        count: 50);
}

// ===== KEYBOARD EVENTS =====================================

[Move By Keyboard|first]
on KeyPress(key, "Pressed")
with e.IsPlayer & e.IsAt(x, y)
{
    let p = x, q = y;
    match key {
        case "Left": p = x - 1;
        case "Right": p = x + 1;
        case "Up": q = y - 1;
        case "Down": q = y + 1;
    } then {
        if terrain[p, q] == '.' {
            trigger MoveIntent(e, p, q);
            consume event;
        }
    }
}

[Do Move Intent|last]
on MoveIntent(e, p, q)
with e.IsPlayer & e.IsAt(x, y)
{
    x = p;
    y = q;
    consume event;
}

[Draw Terrain]
with unique(terrain)
{
    print terrain;
}